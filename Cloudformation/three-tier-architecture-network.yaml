AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a highly available VPC network for a three-tier application.

Parameters:
  ProjectName:
    Description: Name of the project for tagging resources.
    Type: String
    Default: three-tier-app # Matches your var.project_name default

  VpcCidrBlock:
    Description: CIDR block for the VPC.
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCidr1:
    Description: CIDR block for the first public subnet.
    Type: String
    Default: 10.0.1.0/24

  PublicSubnetCidr2:
    Description: CIDR block for the second public subnet.
    Type: String
    Default: 10.0.2.0/24

  AppSubnetCidr1:
    Description: CIDR block for the first application subnet.
    Type: String
    Default: 10.0.11.0/24

  AppSubnetCidr2:
    Description: CIDR block for the second application subnet.
    Type: String
    Default: 10.0.12.0/24

  DbSubnetCidr1:
    Description: CIDR block for the first database subnet.
    Type: String
    Default: 10.0.21.0/24

  DbSubnetCidr2:
    Description: CIDR block for the second database subnet.
    Type: String
    Default: 10.0.22.0/24

  AvailabilityZone1:
    Description: First Availability Zone for deployment.
    Type: AWS::EC2::AvailabilityZone::Name # Dynamic lookup
    Default: us-east-1a # Change to your preferred AZ (e.g., ap-south-1a)

  AvailabilityZone2:
    Description: Second Availability Zone for deployment.
    Type: AWS::EC2::AvailabilityZone::Name # Dynamic lookup
    Default: us-east-1b # Change to your preferred AZ (e.g., ap-south-1b)

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'

  # Attach Internet Gateway to VPC
  GatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr1
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr2
      AvailabilityZone: !Ref AvailabilityZone2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-2'

  # Application Subnets (Private)
  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AppSubnetCidr1
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-app-subnet-1'

  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AppSubnetCidr2
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-app-subnet-2'

  # Database Subnets (Private)
  DbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DbSubnetCidr1
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-1'

  DbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DbSubnetCidr2
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-2'

  # EIP for NAT Gateway 1
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-eip-1'

  # NAT Gateway 1
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-gateway-1'
    DependsOn: GatewayAttach # Ensure IGW is attached before creating NAT GW

  # EIP for NAT Gateway 2
  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-eip-2'

  # NAT Gateway 2
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-gateway-2'
    DependsOn: GatewayAttach # Ensure IGW is attached before creating NAT GW

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt'

  # Route to Internet Gateway in Public Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: GatewayAttach

  # Associate Public Subnets with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Route Table 1 (for AppSubnet1 and DbSubnet1)
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-rt-1'

  # Route to NAT Gateway 1 in Private Route Table 1
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # Associate App Subnet 1 with Private Route Table 1
  AppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  # Associate DB Subnet 1 with Private Route Table 1
  DbSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  # Private Route Table 2 (for AppSubnet2 and DbSubnet2)
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-rt-2'

  # Route to NAT Gateway 2 in Private Route Table 2
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # Associate App Subnet 2 with Private Route Table 2
  AppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Associate DB Subnet 2 with Private Route Table 2
  DbSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DbSubnet2
      RouteTableId: !Ref PrivateRouteTable2

Outputs:
  VpcId:
    Description: The ID of the created VPC.
    Value: !Ref VPC
    Export:
      Name: !Sub '${ProjectName}-VPCID'

  PublicSubnetIds:
    Description: List of Public Subnet IDs.
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub '${ProjectName}-PublicSubnetIDs'

  ApplicationSubnetIds:
    Description: List of Application Subnet IDs.
    Value: !Join [",", [!Ref AppSubnet1, !Ref AppSubnet2]]
    Export:
      Name: !Sub '${ProjectName}-ApplicationSubnetIDs'

  DatabaseSubnetIds:
    Description: List of Database Subnet IDs.
    Value: !Join [",", [!Ref DbSubnet1, !Ref DbSubnet2]]
    Export:
      Name: !Sub '${ProjectName}-DatabaseSubnetIDs'

  AvailabilityZone1:
    Description: First Availability Zone.
    Value: !Ref AvailabilityZone1
    Export:
      Name: !Sub '${ProjectName}-AZ1'

  AvailabilityZone2:
    Description: Second Availability Zone.
    Value: !Ref AvailabilityZone2
    Export:
      Name: !Sub '${ProjectName}-AZ2'

      # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ALB
      VpcId: !Ref VPC # References the VPC from above
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb-sg'

  # Security Group for Application Servers
  AppServersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access from ALB to App Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId # Reference ALB SG
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0 # Allows outbound to DB and internet via NAT
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-app-sg'

  # Security Group for RDS Database
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from Application Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306 # MySQL Port
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt AppServersSecurityGroup.GroupId # Reference App SG
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-rds-sg'

Outputs:
  # ... (existing VPC outputs) ...

  ALBSecurityGroupId:
    Description: The ID of the ALB Security Group.
    Value: !GetAtt ALBSecurityGroup.GroupId
    Export:
      Name: !Sub '${ProjectName}-ALBSecurityGroupID'

  AppServersSecurityGroupId:
    Description: The ID of the Application Servers Security Group.
    Value: !GetAtt AppServersSecurityGroup.GroupId
    Export:
      Name: !Sub '${ProjectName}-AppServersSecurityGroupID'

  RDSSecurityGroupId:
    Description: The ID of the RDS Security Group.
    Value: !GetAtt RDSSecurityGroup.GroupId
    Export:
      Name: !Sub '${ProjectName}-RDSSecurityGroupID'